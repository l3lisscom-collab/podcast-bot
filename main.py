import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import subprocess
from pathlib import Path
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® –¢–û–ö–ï–ù –ë–û–¢–ê
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–°–Æ–î–ê"

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR = Path("temp_audio")
TEMP_DIR.mkdir(exist_ok=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_files = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞ –ø–æ–¥–∫–∞—Å—Ç–æ–≤.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ 2-3 –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞\n"
        "‚ö°Ô∏è –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /process\n\n"
        "–Ø —Å–∫–ª–µ—é –∏—Ö, —É—Å–∫–æ—Ä—é –Ω–∞ 1.2x –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª!"
    )

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_files:
        user_files[user_id] = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    if update.message.audio:
        file = await update.message.audio.get_file()
        file_name = update.message.audio.file_name or f"audio_{len(user_files[user_id])}.mp3"
    elif update.message.voice:
        file = await update.message.voice.get_file()
        file_name = f"voice_{len(user_files[user_id])}.ogg"
    elif update.message.document and update.message.document.mime_type.startswith('audio'):
        file = await update.message.document.get_file()
        file_name = update.message.document.file_name
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = TEMP_DIR / f"{user_id}_{len(user_files[user_id])}_{file_name}"
    await file.download_to_drive(file_path)
    
    user_files[user_id].append(str(file_path))
    
    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª {len(user_files[user_id])} –ø–æ–ª—É—á–µ–Ω!\n"
        f"üìù –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(user_files[user_id])}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )

async def process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–∫–ª–µ–π–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in user_files or len(user_files[user_id]) == 0:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã!")
        return
    
    if len(user_files[user_id]) < 2:
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–ª–µ–π–∫–∏!")
        return
    
    await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É.")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è FFmpeg
        file_list_path = TEMP_DIR / f"{user_id}_filelist.txt"
        with open(file_list_path, 'w', encoding='utf-8') as f:
            for audio_file in user_files[user_id]:
                # FFmpeg —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç: file 'path'
                f.write(f"file '{audio_file}'\n")
        
        # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        output_file = TEMP_DIR / f"{user_id}_output.mp3"
        
        # FFmpeg –∫–æ–º–∞–Ω–¥–∞: —Å–∫–ª–µ–π–∫–∞ + —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ 1.2x
        command = [
            'ffmpeg',
            '-f', 'concat',
            '-safe', '0',
            '-i', str(file_list_path),
            '-filter:a', 'atempo=1.2',  # –£—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ 1.2x
            '-codec:a', 'libmp3lame',
            '-b:a', '192k',
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª
            str(output_file)
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if result.returncode != 0:
            logger.error(f"FFmpeg error: {result.stderr}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{result.stderr[:500]}"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if not output_file.exists():
            await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
        
        with open(output_file, 'rb') as audio:
            await update.message.reply_audio(
                audio=audio,
                filename=f"podcast_processed_{user_id}.mp3",
                caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Å–∫–ª–µ–µ–Ω—ã –∏ —É—Å–∫–æ—Ä–µ–Ω—ã –Ω–∞ 1.2x"
            )
        
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cleanup_user_files(user_id)
        
        await update.message.reply_text(
            "üéâ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã."
        )
        
    except subprocess.TimeoutExpired:
        await update.message.reply_text("‚ùå –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –§–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ.")
    except Exception as e:
        logger.error(f"Processing error: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        cleanup_user_files(user_id)

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    cleanup_user_files(user_id)
    await update.message.reply_text("üóë –§–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ.")

def cleanup_user_files(user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_files:
        for file_path in user_files[user_id]:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                logger.error(f"Error deleting file {file_path}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        try:
            file_list = TEMP_DIR / f"{user_id}_filelist.txt"
            if file_list.exists():
                os.remove(file_list)
            
            output_file = TEMP_DIR / f"{user_id}_output.mp3"
            if output_file.exists():
                os.remove(output_file)
        except Exception as e:
            logger.error(f"Error in cleanup: {e}")
        
        user_files[user_id] = []

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 2-3 –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /process\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª!\n\n"
        "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/process - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–°–Æ–î–ê":
        print("‚ùå –û–®–ò–ë–ö–ê: –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
    try:
        result = subprocess.run(['ffmpeg', '-version'], capture_output=True)
        if result.returncode != 0:
            print("‚ùå FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        print("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω")
    except FileNotFoundError:
        print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ Replit.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("process", process))
    application.add_handler(CommandHandler("clear", clear))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.AUDIO | filters.VOICE | filters.Document.AUDIO,
        handle_audio
    ))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
